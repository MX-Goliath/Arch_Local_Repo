#!/bin/bash

########
#
# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ Arch Linux
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∑–µ—Ä–∫–∞–ª–æ–º –∏ AUR –ø–∞–∫–µ—Ç–∞–º–∏
# 
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ sync-arch-mirror.sh (Copyright ¬© 2014-2019 Florian Pritz <bluewind@xinu.at>)
# –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
#
########

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
target="/home/$USER/arch-mirror-repo"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
aur_target="$target/aur"

# –§–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
mirror_lock="$target/syncrepo.lck"
aur_lock="$target/syncaur.lck"

# –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º AUR –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
aur_packages_file="$target/aur-packages.list"

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ AUR
build_dir="/tmp/aur-build-$$"

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è rsync (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
bwlimit=0

# –§–∞–π–ª mirrorlist
mirrorlist_file="/etc/pacman.d/mirrorlist"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
arch=$(uname -m)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
aur_repo_dir="$aur_target/os/$arch"
aur_db_name="aur-local.db.tar.gz"
aur_db_path="$aur_repo_dir/$aur_db_name"
aur_state_file="$aur_repo_dir/aur-local.state"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
force_rebuild=false
quiet=false
auto_clean=true

# =============================================================================
# –¶–í–ï–¢–ê –ò –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_colored() {
  local color=$1
  local text=$2
  echo -e "${color}${text}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
read_input() {
  local prompt=$1
  local default=$2
  if [[ -n "$default" ]]; then
    read -p "$prompt [$default]: " input
    echo "${input:-$default}"
  else
    read -p "$prompt: " input
    echo "$input"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm() {
  local prompt=$1
  local response
  while true; do
    read -p "$prompt (y/n): " response
    case $response in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ y –∏–ª–∏ n.";;
    esac
  done
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
show_header() {
  clear
  print_colored $CYAN "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
  print_colored $CYAN "‚ïë                    –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ Arch Linux            ‚ïë"
  print_colored $CYAN "‚ïë                        –ó–µ—Ä–∫–∞–ª–æ + AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π                         ‚ïë"
  print_colored $CYAN "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
  echo ""
}

# =============================================================================
# –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
setup_directories() {
  [ ! -d "$target" ] && mkdir -p "$target"
  [ ! -d "$aur_repo_dir" ] && mkdir -p "$aur_repo_dir"
  [ ! -f "$aur_packages_file" ] && touch "$aur_packages_file"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
check_dependencies() {
  local missing=()
  
  if ! command -v rsync >/dev/null 2>&1; then
    missing+=("rsync")
  fi
  
  if ! command -v repo-add >/dev/null 2>&1; then
    missing+=("pacman-contrib")
  fi
  
  if ! command -v yay >/dev/null 2>&1; then
    missing+=("yay")
  fi
  
  if [[ ${#missing[@]} -gt 0 ]]; then
    print_colored $RED "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:"
    printf '   %s\n' "${missing[@]}"
    echo ""
    print_colored $YELLOW "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    return 1
  fi
  
  return 0
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
show_status() {
  print_colored $BLUE "üìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:"
  echo ""
  
  # –°—Ç–∞—Ç—É—Å –∑–µ—Ä–∫–∞–ª–∞
  print_colored $WHITE "ü™û –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ:"
  if [[ -f "$target/lastupdate" ]]; then
    local last_update=$(date -d "@$(cat "$target/lastupdate" 2>/dev/null || echo 0)" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    print_colored $GREEN "  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $last_update"
  else
    print_colored $YELLOW "  ‚ö†Ô∏è  –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
  fi
  
  local mirror_size=$(du -sh "$target" 2>/dev/null | cut -f1 || echo "0")
  echo "  üíæ –†–∞–∑–º–µ—Ä –∑–µ—Ä–∫–∞–ª–∞: $mirror_size"
  
  # –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  local local_repos=0
  for repo in core extra community multilib; do
    local repo_dir="$target/$repo/os/$arch"
    if [[ -d "$repo_dir" ]] && [[ -f "$repo_dir/${repo}-local.db.tar.gz" ]]; then
      ((local_repos++))
    fi
  done
  echo "  üì¶ –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: $local_repos/4"
  
  echo ""
  
  # –°—Ç–∞—Ç—É—Å AUR
  print_colored $WHITE "üì¶ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:"
  local aur_pkg_count=0
  if [[ -f "$aur_packages_file" ]]; then
    aur_pkg_count=$(grep -c '^[^#]' "$aur_packages_file" 2>/dev/null || echo 0)
  fi
  
  local aur_built_count=0
  if [[ -d "$aur_repo_dir" ]]; then
    aur_built_count=$(find "$aur_repo_dir" -name "*.pkg.tar.zst" -type f | wc -l)
  fi
  
  echo "  üìã –ü–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: $aur_pkg_count"
  echo "  üî® –°–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: $aur_built_count"
  
  if [[ -f "$aur_db_path" ]]; then
    print_colored $GREEN "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∞"
  else
    print_colored $YELLOW "  ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
  fi
  
  local aur_size=$(du -sh "$aur_repo_dir" 2>/dev/null | cut -f1 || echo "0")
  echo "  üíæ –†–∞–∑–º–µ—Ä AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $aur_size"
  echo ""
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ó–ï–†–ö–ê–õ–ê
# =============================================================================

# –ü–æ–ª—É—á–∞–µ–º –∑–µ—Ä–∫–∞–ª–∞ –∏–∑ mirrorlist
get_mirrors() {
  local mirrors=()
  
  if [[ -f "$mirrorlist_file" ]]; then
    while IFS= read -r line; do
      if [[ "$line" == "Server = "* ]]; then
        local url="${line#Server = }"
        local rsync_url="${url/https:\/\//rsync:\/\/}"
        rsync_url="${rsync_url/\/\$repo\/os\/\$arch/}"
        mirrors+=("$rsync_url")
      fi
    done < "$mirrorlist_file"
  fi
  
  printf '%s\n' "${mirrors[@]}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–µ—Ä–∫–∞–ª
find_working_mirror() {
  local mirrors=($(get_mirrors))
  
  for mirror in "${mirrors[@]}"; do
    if rsync --list-only --timeout=5 --contimeout=5 "$mirror" "$target" &>/dev/null; then
      echo "$mirror"
      return 0
    fi
  done
  
  return 1
}

# –ö–æ–º–∞–Ω–¥–∞ rsync
rsync_cmd() {
  local -a cmd=(rsync -rlptH --safe-links --delete-delay --delay-updates
    "--timeout=600" "--contimeout=60" --no-motd)

  if stty &>/dev/null; then
    cmd+=(-h -v --progress)
  else
    cmd+=(--quiet)
  fi

  if ((bwlimit>0)); then
    cmd+=("--bwlimit=$bwlimit")
  fi

  "${cmd[@]}" "$@"
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–µ—Ä–∫–∞–ª–∞
sync_mirror() {
  local force_sync="$1"
  
  print_colored $BLUE "ü™û –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∞..."
  
  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  exec 8>"$mirror_lock"
  if ! flock -n 8; then
    print_colored $RED "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–µ—Ä–∫–∞–ª–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    return 1
  fi
  
  # –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –∑–µ—Ä–∫–∞–ª–∞
  local source_url=$(find_working_mirror)
  if [[ -z "$source_url" ]]; then
    print_colored $RED "‚ùå –ù–∏ –æ–¥–Ω–æ –∑–µ—Ä–∫–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    return 1
  fi
  
  print_colored $GREEN "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–µ—Ä–∫–∞–ª–æ: $source_url"
  
  # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  local lastupdate_url="${source_url/rsync:\/\/\//https:\/\/}/lastupdate"
  
  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  find "${target}" -name '.~~tmp~~' -exec rm -r {} + 2>/dev/null || true
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  if [[ "$force_sync" != "true" ]] && ! tty -s && [[ -f "$target/lastupdate" ]]; then
    if diff -b <(curl -Ls "$lastupdate_url" 2>/dev/null) "$target/lastupdate" >/dev/null 2>&1; then
      print_colored $GREEN "‚úÖ –ó–µ—Ä–∫–∞–ª–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
      rsync_cmd "$source_url/lastsync" "$target/lastsync" 2>/dev/null || true
      return 0
    fi
  fi
  
  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  print_colored $BLUE "üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..."
  if rsync_cmd \
    --exclude='gnome-unstable' \
    --exclude='multilib-testing' \
    --exclude='core-testing' \
    --exclude='multilib-staging' \
    --exclude='extra-staging' \
    --exclude='core-staging' \
    --exclude='extra-testing' \
    "${source_url}" \
    "${target}"; then
    
    # –û–±–Ω–æ–≤–ª—è–µ–º lastupdate
    curl -Ls "$lastupdate_url" > "${target}/lastupdate" 2>/dev/null
    print_colored $GREEN "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–µ—Ä–∫–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    index_local_repositories
  else
    print_colored $RED "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–µ—Ä–∫–∞–ª–∞"
    return 1
  fi
}

# –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
index_local_repositories() {
  print_colored $BLUE "üì¶ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤..."
  
  for repo in core extra community multilib; do
    local repo_dir="$target/$repo/os/$arch"
    local db_name="${repo}-local.db.tar.gz"
    local db_path="$repo_dir/$db_name"
    local state_file="$repo_dir/${repo}-local.state"

    [[ ! -d "$repo_dir" ]] && continue

    # –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
    local current_pkg_files_details=""
    if compgen -G "$repo_dir/*.pkg.tar.zst" > /dev/null; then
        current_pkg_files_details=$(find "$repo_dir" -maxdepth 1 -name '*.pkg.tar.zst' -printf '%f\t%s\t%T@\n' | sort)
    fi
    local current_pkg_state_hash=$(echo -n "$current_pkg_files_details" | sha256sum | awk '{print $1}')

    local old_pkg_state_hash=""
    if [[ -f "$state_file" ]]; then
      old_pkg_state_hash=$(cat "$state_file")
    fi

    if [[ "$current_pkg_state_hash" != "$old_pkg_state_hash" ]]; then
      print_colored $YELLOW "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö $repo-local..."

      if repo-add "$db_path" "$repo_dir"/*.pkg.tar.zst 2>/dev/null; then
        echo "$current_pkg_state_hash" > "$state_file"
        print_colored $GREEN "  ‚úÖ $repo-local –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω"
      else
        print_colored $RED "  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ $repo-local"
      fi
    else
      print_colored $GREEN "  ‚úÖ $repo-local –∞–∫—Ç—É–∞–ª–µ–Ω"
    fi
  done
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò AUR
# =============================================================================

# –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã AUR
add_aur_packages() {
  local packages=("$@")
  for pkg in "${packages[@]}"; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ AUR
    print_colored $YELLOW "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ $pkg –≤ AUR..."
    if yay -Si "$pkg" >/dev/null 2>&1; then
      if ! grep -q "^$pkg$" "$aur_packages_file"; then
        echo "$pkg" >> "$aur_packages_file"
        print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $pkg –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫"
      else
        print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç $pkg —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ"
      fi
    else
      print_colored $RED "‚ùå –ü–∞–∫–µ—Ç $pkg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
    fi
  done
}

# –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã AUR
remove_aur_packages() {
  local packages=("$@")
  for pkg in "${packages[@]}"; do
    if grep -q "^$pkg$" "$aur_packages_file"; then
      sed -i "/^$pkg$/d" "$aur_packages_file"
      rm -f "$aur_repo_dir"/${pkg}-*.pkg.tar.zst
      print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $pkg —É–¥–∞–ª–µ–Ω"
    else
      print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç $pkg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
    fi
  done
}

# –°–±–æ—Ä–∫–∞ AUR –ø–∞–∫–µ—Ç–æ–≤
build_aur_packages() {
  if [ ! -s "$aur_packages_file" ]; then
    print_colored $YELLOW "üìã –°–ø–∏—Å–æ–∫ AUR –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
    return 0
  fi

  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  exec 7>"$aur_lock"
  if ! flock -n 7; then
    print_colored $RED "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ AUR —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    return 1
  fi

  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
  mkdir -p "$build_dir"
  cd "$build_dir" || exit 1

  local built_packages=()
  local failed_packages=()
  local total_packages=$(grep -c '^[^#]' "$aur_packages_file")
  local current=0

  print_colored $BLUE "üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É AUR –ø–∞–∫–µ—Ç–æ–≤..."

  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    
    ((current++))
    print_colored $BLUE "[$current/$total_packages] üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞: $package"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
    local needs_rebuild=false
    if [[ "$force_rebuild" == "true" ]]; then
      needs_rebuild=true
      print_colored $YELLOW "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
    else
      local aur_version=$(yay -Si "$package" 2>/dev/null | grep "^Version" | awk '{print $3}')
      local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -printf '%f\n' | head -1)
      
      if [[ -z "$local_pkg" ]] || [[ -z "$aur_version" ]]; then
        needs_rebuild=true
      elif [[ "$local_pkg" != *"$aur_version"* ]]; then
        needs_rebuild=true
        print_colored $YELLOW "üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"
      else
        print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω"
      fi
    fi

    if [[ "$needs_rebuild" == "true" ]]; then
      rm -f "$aur_repo_dir"/${package}-*.pkg.tar.zst
      
      local yay_opts="--noconfirm --needed"
      [[ "$quiet" == "true" ]] && yay_opts="$yay_opts --quiet"
      
      if yay -S $yay_opts "$package"; then
        local pkg_file=$(find /home/$USER/.cache/yay/"$package" -name "*.pkg.tar.zst" -type f | head -1)
        if [[ -n "$pkg_file" && -f "$pkg_file" ]]; then
          cp "$pkg_file" "$aur_repo_dir/"
          built_packages+=("$package")
          print_colored $GREEN "‚úÖ –°–æ–±—Ä–∞–Ω: $package"
        else
          print_colored $RED "‚ùå –§–∞–π–ª –ø–∞–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $package"
          failed_packages+=("$package")
        fi
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: $package"
        failed_packages+=("$package")
      fi
    fi
  done < "$aur_packages_file"

  # –û—á–∏—Å—Ç–∫–∞
  cd /
  rm -rf "$build_dir"

  # –û—Ç—á–µ—Ç
  echo ""
  print_colored $BLUE "üìä –û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ AUR:"
  if [[ ${#built_packages[@]} -gt 0 ]]; then
    print_colored $GREEN "‚úÖ –°–æ–±—Ä–∞–Ω–æ: ${#built_packages[@]}"
    printf '   %s\n' "${built_packages[@]}"
  fi
  
  if [[ ${#failed_packages[@]} -gt 0 ]]; then
    print_colored $RED "‚ùå –û—à–∏–±–∫–∏: ${#failed_packages[@]}"
    printf '   %s\n' "${failed_packages[@]}"
  fi

  if [[ ${#built_packages[@]} -eq 0 && ${#failed_packages[@]} -eq 0 ]]; then
    print_colored $GREEN "‚ÑπÔ∏è  –í—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã"
  fi

  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  update_aur_repository
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AUR
update_aur_repository() {
  print_colored $BLUE "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AUR..."
  
  local current_pkg_files_details=""
  if compgen -G "$aur_repo_dir/*.pkg.tar.zst" > /dev/null; then
      current_pkg_files_details=$(find "$aur_repo_dir" -maxdepth 1 -name '*.pkg.tar.zst' -printf '%f\t%s\t%T@\n' | sort)
  fi
  local current_pkg_state_hash=$(echo -n "$current_pkg_files_details" | sha256sum | awk '{print $1}')

  local old_pkg_state_hash=""
  if [[ -f "$aur_state_file" ]]; then
    old_pkg_state_hash=$(cat "$aur_state_file")
  fi

  if [[ "$current_pkg_state_hash" != "$old_pkg_state_hash" ]]; then
    rm -f "$aur_repo_dir"/aur-local.db* "$aur_repo_dir"/aur-local.files*

    if compgen -G "$aur_repo_dir/*.pkg.tar.zst" > /dev/null; then
      if repo-add "$aur_db_path" "$aur_repo_dir"/*.pkg.tar.zst; then
        echo "$current_pkg_state_hash" > "$aur_state_file"
        print_colored $GREEN "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö AUR –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AUR"
        return 1
      fi
    else
      print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
      rm -f "$aur_state_file"
    fi
  else
    print_colored $GREEN "‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö AUR –∞–∫—Ç—É–∞–ª—å–Ω–∞"
  fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö AUR –ø–∞–∫–µ—Ç–æ–≤
clean_aur_packages() {
  local keep_packages=()
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    keep_packages+=("$package")
  done < "$aur_packages_file"
  
  local to_remove=()
  for pkg_file in "$aur_repo_dir"/*.pkg.tar.zst; do
    [[ ! -f "$pkg_file" ]] && continue
    
    local pkg_name=$(basename "$pkg_file" | sed 's/-[^-]*-[^-]*\.pkg\.tar\.zst$//')
    local found=false
    
    for keep_pkg in "${keep_packages[@]}"; do
      if [[ "$pkg_name" == "$keep_pkg" ]]; then
        found=true
        break
      fi
    done
    
    if [[ "$found" == "false" ]]; then
      to_remove+=("$(basename "$pkg_file")")
    fi
  done
  
  if [[ ${#to_remove[@]} -gt 0 ]]; then
    print_colored $YELLOW "üóëÔ∏è  –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${#to_remove[@]}"
    for pkg in "${to_remove[@]}"; do
      rm -f "$aur_repo_dir/$pkg"
      print_colored $GREEN "  ‚úÖ –£–¥–∞–ª–µ–Ω: $pkg"
    done
    update_aur_repository
  else
    print_colored $GREEN "‚úÖ –°—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
  fi
}

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò PACMAN
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pacman.conf
setup_pacman_conf() {
  local pacman_conf="/etc/pacman.conf"
  
  print_colored $BLUE "üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pacman.conf..."
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
  local has_core_local=$(grep -q "^\[core-local\]" "$pacman_conf" && echo "true" || echo "false")
  local has_extra_local=$(grep -q "^\[extra-local\]" "$pacman_conf" && echo "true" || echo "false")
  local has_multilib_local=$(grep -q "^\[multilib-local\]" "$pacman_conf" && echo "true" || echo "false")
  local has_aur_local=$(grep -q "^\[aur-local\]" "$pacman_conf" && echo "true" || echo "false")
  
  echo "–°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ pacman.conf:"
  echo "  [core-local]: $(if [[ "$has_core_local" == "true" ]]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
  echo "  [extra-local]: $(if [[ "$has_extra_local" == "true" ]]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
  echo "  [multilib-local]: $(if [[ "$has_multilib_local" == "true" ]]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
  echo "  [aur-local]: $(if [[ "$has_aur_local" == "true" ]]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
  echo ""
  
  # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  local temp_file=$(mktemp)
  local added_any=false
  
  if [[ "$has_core_local" == "false" ]] && [[ -d "$target/core/os/$arch" ]]; then
    echo -e "\n# –õ–æ–∫–∞–ª—å–Ω—ã–π core —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n[core-local]\nSigLevel = Optional TrustAll\nServer = file://$target/core/os/\$arch" >> "$temp_file"
    added_any=true
  fi
  
  if [[ "$has_extra_local" == "false" ]] && [[ -d "$target/extra/os/$arch" ]]; then
    echo -e "\n# –õ–æ–∫–∞–ª—å–Ω—ã–π extra —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n[extra-local]\nSigLevel = Optional TrustAll\nServer = file://$target/extra/os/\$arch" >> "$temp_file"
    added_any=true
  fi
  
  if [[ "$has_multilib_local" == "false" ]] && [[ -d "$target/multilib/os/$arch" ]]; then
    echo -e "\n# –õ–æ–∫–∞–ª—å–Ω—ã–π multilib —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n[multilib-local]\nSigLevel = Optional TrustAll\nServer = file://$target/multilib/os/\$arch" >> "$temp_file"
    added_any=true
  fi
  
  if [[ "$has_aur_local" == "false" ]] && [[ -d "$aur_repo_dir" ]]; then
    echo -e "\n# –õ–æ–∫–∞–ª—å–Ω—ã–π AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n[aur-local]\nSigLevel = Optional TrustAll\nServer = file://$aur_target/os/\$arch" >> "$temp_file"
    added_any=true
  fi
  
  if [[ "$added_any" == "true" ]]; then
    echo "–ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏:"
    print_colored $CYAN "$(cat "$temp_file")"
    echo ""
    
    if confirm "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ $pacman_conf?"; then
      if sudo tee -a "$pacman_conf" < "$temp_file" >/dev/null; then
        print_colored $GREEN "‚úÖ –ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        if confirm "–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (sudo pacman -Sy)?"; then
          sudo pacman -Sy
        fi
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π"
      fi
    fi
  else
    print_colored $GREEN "‚úÖ –í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
  fi
  
  rm -f "$temp_file"
}

# =============================================================================
# –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ
# =============================================================================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_main_menu() {
  show_header
  show_status
  
  print_colored $PURPLE "üéõÔ∏è  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
  echo "  1) ü™û –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–æ–º Arch"
  echo "  2) üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
  echo "  3) ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  echo "  4) üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å pacman.conf"
  echo "  5) üîß –£—Ç–∏–ª–∏—Ç—ã"
  echo "  0) üö™ –í—ã—Ö–æ–¥"
  echo ""
}

# –ú–µ–Ω—é –∑–µ—Ä–∫–∞–ª–∞
mirror_menu() {
  while true; do
    show_header
    print_colored $BLUE "ü™û –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–æ–º Arch Linux"
    echo ""
    
    echo "  1) üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–µ—Ä–∫–∞–ª–æ"
    echo "  2) üî® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
    echo "  3) üì¶ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    echo "  4) üìä –°—Ç–∞—Ç—É—Å –∑–µ—Ä–∫–∞–ª–∞"
    echo "  0) ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥"
    echo ""
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    case $choice in
      1)
        sync_mirror false
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      2)
        if confirm "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é?"; then
          sync_mirror true
        fi
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      3)
        index_local_repositories
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      4)
        show_mirror_status
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      0)
        break
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        sleep 1
        ;;
    esac
  done
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–µ—Ä–∫–∞–ª–∞
show_mirror_status() {
  show_header
  print_colored $BLUE "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–µ—Ä–∫–∞–ª–∞"
  echo ""
  
  if [[ -f "$target/lastupdate" ]]; then
    local timestamp=$(cat "$target/lastupdate")
    local last_update=$(date -d "@$timestamp" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    print_colored $GREEN "üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $last_update"
  else
    print_colored $YELLOW "‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  if [[ -f "$target/lastsync" ]]; then
    local sync_timestamp=$(cat "$target/lastsync")
    local last_sync=$(date -d "@$sync_timestamp" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    print_colored $GREEN "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: $last_sync"
  fi
  
  echo ""
  print_colored $BLUE "üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã:"
  for repo in core extra community multilib; do
    if [[ -d "$target/$repo" ]]; then
      local size=$(du -sh "$target/$repo" 2>/dev/null | cut -f1)
      local pkg_count=$(find "$target/$repo" -name "*.pkg.tar.zst" -type f 2>/dev/null | wc -l)
      print_colored $GREEN "  ‚úÖ $repo: $size ($pkg_count –ø–∞–∫–µ—Ç–æ–≤)"
      
      # –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      local local_db="$target/$repo/os/$arch/${repo}-local.db.tar.gz"
      if [[ -f "$local_db" ]]; then
        local local_pkg_count=$(find "$target/$repo/os/$arch" -name "*.pkg.tar.zst" -type f 2>/dev/null | wc -l)
        print_colored $CYAN "    üì¶ $repo-local: $local_pkg_count –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
      fi
    else
      print_colored $RED "  ‚ùå $repo: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
  done
  
  echo ""
  print_colored $BLUE "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–µ—Ä–∫–∞–ª–∞:"
  local mirrors=($(get_mirrors))
  for mirror in "${mirrors[@]}"; do
    if rsync --list-only --timeout=3 --contimeout=3 "$mirror" "$target" &>/dev/null; then
      print_colored $GREEN "  ‚úÖ $mirror"
    else
      print_colored $RED "  ‚ùå $mirror"
    fi
  done
}

# –ú–µ–Ω—é AUR
aur_menu() {
  while true; do
    show_header
    print_colored $BLUE "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    echo ""
    
    local pkg_count=$(grep -c '^[^#]' "$aur_packages_file" 2>/dev/null || echo 0)
    echo "üìã –ü–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: $pkg_count"
    echo ""
    
    echo "  1) üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
    echo "  2) ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"
    echo "  3) ‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã"
    echo "  4) üî® –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç—ã"
    echo "  5) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    echo "  6) üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã"
    echo "  7) ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ"
    echo "  0) ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥"
    echo ""
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    case $choice in
      1)
        list_aur_packages
        ;;
      2)
        add_aur_packages_interactive
        ;;
      3)
        remove_aur_packages_interactive
        ;;
      4)
        if confirm "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É AUR –ø–∞–∫–µ—Ç–æ–≤?"; then
          build_aur_packages
        fi
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      5)
        update_aur_repository
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      6)
        if confirm "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã?"; then
          clean_aur_packages
        fi
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      7)
        show_aur_package_info
        ;;
      0)
        break
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        sleep 1
        ;;
    esac
  done
}

# –°–ø–∏—Å–æ–∫ AUR –ø–∞–∫–µ—Ç–æ–≤
list_aur_packages() {
  show_header
  print_colored $BLUE "üìã –°–ø–∏—Å–æ–∫ AUR –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
  else
    local i=1
    while IFS= read -r package; do
      [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
      
      local status_icon="‚ùì"
      local pkg_file=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
      
      if [[ -n "$pkg_file" ]]; then
        status_icon="‚úÖ"
        local pkg_size=$(du -h "$pkg_file" | cut -f1)
        echo "  $i) $status_icon $package (—Å–æ–±—Ä–∞–Ω, $pkg_size)"
      else
        status_icon="‚ùå"
        echo "  $i) $status_icon $package (–Ω–µ —Å–æ–±—Ä–∞–Ω)"
      fi
      ((i++))
    done < "$aur_packages_file"
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..."
}

# –î–æ–±–∞–≤–∏—Ç—å AUR –ø–∞–∫–µ—Ç—ã
add_aur_packages_interactive() {
  show_header
  print_colored $BLUE "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ AUR –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  while true; do
    local package=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ AUR (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    
    if [[ "$package" == "q" || "$package" == "Q" ]]; then
      break
    fi
    
    if [[ -z "$package" ]]; then
      print_colored $YELLOW "–ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
      continue
    fi
    
    add_aur_packages "$package"
    echo ""
  done
}

# –£–¥–∞–ª–∏—Ç—å AUR –ø–∞–∫–µ—Ç—ã
remove_aur_packages_interactive() {
  show_header
  print_colored $BLUE "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ AUR –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..."
    return
  fi
  
  local packages=()
  local i=1
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    packages+=("$package")
    echo "  $i) $package"
    ((i++))
  done < "$aur_packages_file"
  
  echo ""
  local choice=$(read_input "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
  
  if [[ "$choice" == "q" || "$choice" == "Q" ]]; then
    return
  fi
  
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 && "$choice" -le ${#packages[@]} ]]; then
    local package_to_remove="${packages[$((choice-1))]}"
    
    if confirm "–£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç '$package_to_remove'?"; then
      remove_aur_packages "$package_to_remove"
    fi
  else
    print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞"
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AUR –ø–∞–∫–µ—Ç–µ
show_aur_package_info() {
  show_header
  print_colored $BLUE "‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AUR –ø–∞–∫–µ—Ç–µ"
  echo ""
  
  local package=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–∫–µ—Ç–∞")
  
  if [[ -z "$package" ]]; then
    print_colored $RED "‚ùå –ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..."
    return
  fi
  
  echo ""
  print_colored $BLUE "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ: $package"
  echo ""
  
  # –°—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ
  if grep -q "^$package$" "$aur_packages_file"; then
    print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  else
    print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç –ù–ï –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  fi
  
  # –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
  local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
  if [[ -n "$local_pkg" ]]; then
    local pkg_size=$(du -h "$local_pkg" | cut -f1)
    local pkg_date=$(date -r "$local_pkg" "+%Y-%m-%d %H:%M")
    print_colored $GREEN "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $(basename "$local_pkg")"
    echo "   üíæ –†–∞–∑–º–µ—Ä: $pkg_size"
    echo "   üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: $pkg_date"
  else
    print_colored $YELLOW "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR
  echo ""
  print_colored $BLUE "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR:"
  if yay -Si "$package" 2>/dev/null; then
    echo ""
  else
    print_colored $RED "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
  fi
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..."
}

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_menu() {
  while true; do
    show_header
    print_colored $BLUE "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo ""
    
    echo "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    echo "  1) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ AUR: $(if $force_rebuild; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
    echo "  2) –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: $(if $quiet; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
    echo "  3) –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: $(if $auto_clean; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
    echo "  4) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ rsync: $(if ((bwlimit>0)); then echo "${bwlimit} –ö–ë/—Å"; else echo '–í–´–ö–õ'; fi)"
    echo "  5) –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç–∏"
    echo "  0) ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥"
    echo ""
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
    
    case $choice in
      1)
        force_rebuild=$(! $force_rebuild)
        print_colored $GREEN "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: $(if $force_rebuild; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
        sleep 1
        ;;
      2)
        quiet=$(! $quiet)
        print_colored $GREEN "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: $(if $quiet; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
        sleep 1
        ;;
      3)
        auto_clean=$(! $auto_clean)
        print_colored $GREEN "–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: $(if $auto_clean; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
        sleep 1
        ;;
      4)
        local new_limit=$(read_input "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ rsync –≤ –ö–ë/—Å (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)" "$bwlimit")
        if [[ "$new_limit" =~ ^[0-9]+$ ]]; then
          bwlimit=$new_limit
          print_colored $GREEN "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(if ((bwlimit>0)); then echo "${bwlimit} –ö–ë/—Å"; else echo '–í–´–ö–õ'; fi)"
        else
          print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        fi
        sleep 1
        ;;
      5)
        show_paths_info
        ;;
      0)
        break
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        sleep 1
        ;;
    esac
  done
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö
show_paths_info() {
  show_header
  print_colored $BLUE "üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π"
  echo ""
  
  echo "–¢–µ–∫—É—â–∏–µ –ø—É—Ç–∏:"
  echo "  üóÇÔ∏è  –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $target"
  echo "  üì¶ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $aur_target"
  echo "  üìã –°–ø–∏—Å–æ–∫ AUR –ø–∞–∫–µ—Ç–æ–≤: $aur_packages_file"
  echo "  ü™û –§–∞–π–ª mirrorlist: $mirrorlist_file"
  echo "  üèóÔ∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞: $build_dir"
  echo ""
  
  local total_size=$(du -sh "$target" 2>/dev/null | cut -f1 || echo "0")
  print_colored $BLUE "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..."
}

# –ú–µ–Ω—é —É—Ç–∏–ª–∏—Ç
utilities_menu() {
  while true; do
    show_header
    print_colored $BLUE "üîß –£—Ç–∏–ª–∏—Ç—ã"
    echo ""
    
    echo "  1) üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π"
    echo "  2) üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo "  3) üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    echo "  4) üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
    echo "  5) üìù –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "  6) üì• –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
    echo "  0) ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥"
    echo ""
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—É")
    
    case $choice in
      1)
        full_cleanup
        ;;
      2)
        check_dependencies
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      3)
        show_detailed_stats
        ;;
      4)
        check_integrity
        ;;
      5)
        export_config
        ;;
      6)
        import_package_list
        ;;
      0)
        break
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        sleep 1
        ;;
    esac
  done
}

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
full_cleanup() {
  show_header
  print_colored $BLUE "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π"
  echo ""
  
  print_colored $YELLOW "‚ö†Ô∏è  –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç:"
  echo "  - –ö—ç—à yay"
  echo "  - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏"
  echo "  - –°—Ç–∞—Ä—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
  echo ""
  
  if confirm "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É?"; then
    print_colored $BLUE "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ yay..."
    yay -Sc --noconfirm >/dev/null 2>&1
    
    print_colored $BLUE "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    rm -rf /tmp/aur-build-* 2>/dev/null
    find "${target}" -name '.~~tmp~~' -exec rm -r {} + 2>/dev/null
    
    print_colored $BLUE "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
    find "$target" -name "*.db.tar.gz.old" -delete 2>/dev/null
    find "$target" -name "*.files.tar.gz.old" -delete 2>/dev/null
    
    print_colored $GREEN "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  fi
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
show_detailed_stats() {
  show_header
  print_colored $BLUE "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
  echo ""
  
  # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  print_colored $WHITE "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
  local total_size=$(du -sh "$target" 2>/dev/null | cut -f1 || echo "0")
  local total_packages=0
  
  for repo in core extra community multilib; do
    if [[ -d "$target/$repo" ]]; then
      local count=$(find "$target/$repo" -name "*.pkg.tar.zst" -type f 2>/dev/null | wc -l)
      total_packages=$((total_packages + count))
    fi
  done
  
  local aur_packages=$(find "$aur_repo_dir" -name "*.pkg.tar.zst" -type f 2>/dev/null | wc -l)
  total_packages=$((total_packages + aur_packages))
  
  echo "  üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
  echo "  üì¶ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: $total_packages"
  echo ""
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
  print_colored $WHITE "üìÅ –ü–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º:"
  for repo in core extra community multilib; do
    if [[ -d "$target/$repo" ]]; then
      local repo_size=$(du -sh "$target/$repo" 2>/dev/null | cut -f1)
      local repo_packages=$(find "$target/$repo" -name "*.pkg.tar.zst" -type f 2>/dev/null | wc -l)
      echo "  $repo: $repo_size ($repo_packages –ø–∞–∫–µ—Ç–æ–≤)"
    fi
  done
  
  if [[ -d "$aur_repo_dir" ]]; then
    local aur_size=$(du -sh "$aur_repo_dir" 2>/dev/null | cut -f1)
    echo "  aur-local: $aur_size ($aur_packages –ø–∞–∫–µ—Ç–æ–≤)"
  fi
  
  echo ""
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  print_colored $WHITE "‚è±Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:"
  if [[ -f "$target/lastupdate" ]]; then
    local last_update=$(date -d "@$(cat "$target/lastupdate")" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    echo "  üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞: $last_update"
  fi
  
  if [[ -f "$aur_state_file" ]]; then
    local aur_update=$(date -r "$aur_state_file" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    echo "  üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ AUR: $aur_update"
  fi
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
check_integrity() {
  show_header
  print_colored $BLUE "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
  echo ""
  
  print_colored $BLUE "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
  local errors=0
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  for dir in "$target" "$aur_repo_dir"; do
    if [[ ! -d "$dir" ]]; then
      print_colored $RED "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
      ((errors++))
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if [[ ! -f "$aur_packages_file" ]]; then
    print_colored $RED "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ AUR –ø–∞–∫–µ—Ç–æ–≤"
    ((errors++))
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
  print_colored $BLUE "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
  for repo in core extra community multilib; do
    local repo_dir="$target/$repo/os/$arch"
    if [[ -d "$repo_dir" ]]; then
      local db_file="$repo_dir/${repo}-local.db.tar.gz"
      if [[ -f "$db_file" ]]; then
        if ! tar -tf "$db_file" >/dev/null 2>&1; then
          print_colored $RED "‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $db_file"
          ((errors++))
        fi
      fi
    fi
  done
  
  if [[ -f "$aur_db_path" ]]; then
    if ! tar -tf "$aur_db_path" >/dev/null 2>&1; then
      print_colored $RED "‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö AUR"
      ((errors++))
    fi
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  print_colored $BLUE "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."
  for lock_file in "$mirror_lock" "$aur_lock"; do
    if [[ -f "$lock_file" ]]; then
      if ! flock -n "$lock_file" true 2>/dev/null; then
        print_colored $YELLOW "‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: $lock_file"
      fi
    fi
  done
  
  if [[ $errors -eq 0 ]]; then
    print_colored $GREEN "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞"
  else
    print_colored $RED "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: $errors"
  fi
  
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export_config() {
  show_header
  print_colored $BLUE "üìù –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
  echo ""
  
  local export_file="$target/arch-repo-config-$(date +%Y%m%d-%H%M%S).txt"
  
  cat > "$export_file" << EOF
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Arch Repo Manager
# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $(date)

# –ü—É—Ç–∏
TARGET_DIR=$target
AUR_TARGET_DIR=$aur_target
PACKAGES_FILE=$aur_packages_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FORCE_REBUILD=$force_rebuild
QUIET_MODE=$quiet
AUTO_CLEAN=$auto_clean
BANDWIDTH_LIMIT=$bwlimit

# AUR –ø–∞–∫–µ—Ç—ã
EOF
  
  if [[ -f "$aur_packages_file" ]]; then
    echo "AUR_PACKAGES=(" >> "$export_file"
    while IFS= read -r package; do
      [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
      echo "  \"$package\"" >> "$export_file"
    done < "$aur_packages_file"
    echo ")" >> "$export_file"
  fi
  
  print_colored $GREEN "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: $export_file"
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
import_package_list() {
  show_header
  print_colored $BLUE "üì• –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  local import_file=$(read_input "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–∫–µ—Ç–æ–≤")
  
  if [[ ! -f "$import_file" ]]; then
    print_colored $RED "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $import_file"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    return
  fi
  
  local count=0
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    
    if ! grep -q "^$package$" "$aur_packages_file"; then
      echo "$package" >> "$aur_packages_file"
      print_colored $GREEN "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: $package"
      ((count++))
    else
      print_colored $YELLOW "‚ö†Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $package"
    fi
  done < "$import_file"
  
  print_colored $GREEN "üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: $count"
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# =============================================================================
# –ì–õ–ê–í–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
main_interface() {
  while true; do
    show_main_menu
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    case $choice in
      1)
        mirror_menu
        ;;
      2)
        aur_menu
        ;;
      3)
        settings_menu
        ;;
      4)
        setup_pacman_conf
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        ;;
      5)
        utilities_menu
        ;;
      0)
        print_colored $GREEN "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        exit 0
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        sleep 1
        ;;
    esac
  done
}

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

main() {
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  setup_directories
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)
  check_dependencies
  
  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  if [[ $# -eq 0 ]]; then
    main_interface
  else
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    case "$1" in
      "sync")
        sync_mirror false
        ;;
      "sync-force")
        sync_mirror true
        ;;
      "build-aur")
        build_aur_packages
        ;;
      "update-aur")
        update_aur_repository
        ;;
      *)
        print_colored $YELLOW "‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
        print_colored $BLUE "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã: sync, sync-force, build-aur, update-aur"
        print_colored $BLUE "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
        exit 1
        ;;
    esac
  fi
}

# –ó–∞–ø—É—Å–∫
main "$@" 