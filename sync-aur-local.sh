#!/bin/bash

########
#
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º AUR –ø–∞–∫–µ—Ç–æ–≤
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ sync-arch-mirror.sh
#
########

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Ç–∞ –∂–µ —á—Ç–æ –∏ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
target="/home/$USER/arch-mirror-repo"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
aur_target="$target/aur"

# –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
lock="$target/syncaur.lck"

# –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º AUR –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ (–æ–¥–∏–Ω –ø–∞–∫–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É)
aur_packages_file="$target/aur-packages.list"

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏
build_dir="/tmp/aur-build-$$"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
arch=$(uname -m)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
aur_repo_dir="$aur_target/os/$arch"
db_name="aur-local.db.tar.gz"
db_path="$aur_repo_dir/$db_name"
state_file="$aur_repo_dir/aur-local.state"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
force_rebuild=false
quiet=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_colored() {
  local color=$1
  local text=$2
  echo -e "${color}${text}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
read_input() {
  local prompt=$1
  local default=$2
  if [[ -n "$default" ]]; then
    read -p "$prompt [$default]: " input
    echo "${input:-$default}"
  else
    read -p "$prompt: " input
    echo "$input"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm() {
  local prompt=$1
  local response
  while true; do
    read -p "$prompt (y/n): " response
    case $response in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ y –∏–ª–∏ n.";;
    esac
  done
}

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
setup_directories() {
  [ ! -d "$target" ] && mkdir -p "$target"
  [ ! -d "$aur_repo_dir" ] && mkdir -p "$aur_repo_dir"
  [ ! -f "$aur_packages_file" ] && touch "$aur_packages_file"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yay
check_yay() {
  if ! command -v yay >/dev/null 2>&1; then
    print_colored $RED "–û—à–∏–±–∫–∞: yay –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ yay –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AUR."
    exit 1
  fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
show_header() {
  clear
  print_colored $CYAN "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
  print_colored $CYAN "‚ïë                    –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è           ‚ïë"
  print_colored $CYAN "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
  echo ""
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
show_status() {
  local pkg_count=0
  local repo_size=0
  
  if [[ -f "$aur_packages_file" ]]; then
    pkg_count=$(grep -c '^[^#]' "$aur_packages_file" 2>/dev/null || echo 0)
  fi
  
  if [[ -d "$aur_repo_dir" ]]; then
    repo_size=$(du -sh "$aur_repo_dir" 2>/dev/null | cut -f1 || echo "0")
  fi
  
  print_colored $BLUE "–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
  echo "  üì¶ –ü–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: $pkg_count"
  echo "  üíæ –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $repo_size"
  echo "  üìÅ –ü—É—Ç—å: $aur_repo_dir"
  
  if [[ -f "$db_path" ]]; then
    print_colored $GREEN "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∞"
  else
    print_colored $YELLOW "  ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
  fi
  echo ""
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_main_menu() {
  show_header
  show_status
  
  print_colored $PURPLE "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
  echo "  1) üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
  echo "  2) ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"
  echo "  3) ‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã"
  echo "  4) üî® –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç—ã"
  echo "  5) ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏"
  echo "  6) üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å pacman.conf"
  echo "  7) üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã"
  echo "  8) ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ"
  echo "  9) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
  echo "  0) üö™ –í—ã—Ö–æ–¥"
  echo ""
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
list_packages_cli() {
  print_colored $BLUE "üìã –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏:"
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
    return
  fi
  
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    
    local status_icon="‚ùì"
    local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
    
    if [[ -n "$local_pkg" ]]; then
      status_icon="‚úÖ" # –°–æ–±—Ä–∞–Ω
    else
      status_icon="‚ùå" # –ù–µ —Å–æ–±—Ä–∞–Ω
    fi
    
    echo " $status_icon $package"
  done < "$aur_packages_file"
}

# –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã
add_packages_cli() {
  if [[ $# -eq 0 ]]; then
    print_colored $RED "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞–∫–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") -A <–ø–∞–∫–µ—Ç1> [–ø–∞–∫–µ—Ç2]..."
    return 1
  fi
  
  for package in "$@"; do
    if [[ -z "$package" ]]; then
      print_colored $YELLOW "–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞."
      continue
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ AUR
    print_colored $YELLOW "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ $package –≤ AUR..."
    if yay -Si "$package" >/dev/null 2>&1; then
      if ! grep -q "^$package$" "$aur_packages_file"; then
        echo "$package" >> "$aur_packages_file"
        print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $package –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫"
      else
        print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç $package —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ"
      fi
    else
      print_colored $RED "‚ùå –ü–∞–∫–µ—Ç $package –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
    fi
  done
}

# –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã
remove_packages_cli() {
  if [[ $# -eq 0 ]]; then
    print_colored $RED "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") -R <–ø–∞–∫–µ—Ç1> [–ø–∞–∫–µ—Ç2]..."
    return 1
  fi

  local changed=false
  for package_to_remove in "$@"; do
    if grep -q "^${package_to_remove}$" "$aur_packages_file"; then
      sed -i "/^${package_to_remove}$/d" "$aur_packages_file"
      rm -f "$aur_repo_dir"/${package_to_remove}-*.pkg.tar.zst
      print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $package_to_remove —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."
      changed=true
    else
      print_colored $YELLOW "‚ö†Ô∏è –ü–∞–∫–µ—Ç '$package_to_remove' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ."
    fi
  done

  if [[ "$changed" == "true" ]]; then
    update_repository
  fi
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
package_info_cli() {
  local package=$1
  if [[ -z "$package" ]]; then
    print_colored $RED "‚ùå –ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") -Qi <–ø–∞–∫–µ—Ç>"
    return 1
  fi
  
  print_colored $BLUE "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ: $package"
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
  if grep -q "^$package$" "$aur_packages_file"; then
    print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  else
    print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç –ù–ï –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
  local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
  if [[ -n "$local_pkg" ]]; then
    local pkg_size=$(du -h "$local_pkg" | cut -f1)
    print_colored $GREEN "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $(basename "$local_pkg") ($pkg_size)"
  else
    print_colored $YELLOW "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR
  echo ""
  print_colored $BLUE "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR:"
  if ! yay -Si "$package" 2>/dev/null; then
    print_colored $RED "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
  fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
clean_old_packages_cli() {
  print_colored $BLUE "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
  local keep_packages=()
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    keep_packages+=("$package")
  done < "$aur_packages_file"
  
  # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  local to_remove=()
  for pkg_file in "$aur_repo_dir"/*.pkg.tar.zst; do
    [[ ! -f "$pkg_file" ]] && continue
    
    local pkg_name=$(basename "$pkg_file" | sed 's/-[^-]*-[^-]*\.pkg\.tar\.zst$//')
    local found=false
    
    for keep_pkg in "${keep_packages[@]}"; do
      if [[ "$pkg_name" == "$keep_pkg" ]]; then
        found=true
        break
      fi
    done
    
    if [[ "$found" == "false" ]]; then
      to_remove+=("$(basename "$pkg_file")")
    fi
  done
  
  if [[ ${#to_remove[@]} -eq 0 ]]; then
    print_colored $GREEN "‚úÖ –°—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
  else
    print_colored $YELLOW "–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${#to_remove[@]}"
    echo ""
    printf '   %s\n' "${to_remove[@]}"
    echo ""
    
    if confirm "–£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –ø–∞–∫–µ—Ç—ã?"; then
      for pkg in "${to_remove[@]}"; do
        rm -f "$aur_repo_dir/$pkg"
        print_colored $GREEN "üóëÔ∏è  –£–¥–∞–ª–µ–Ω: $pkg"
      done
      echo ""
      update_repository
    fi
  fi
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
usage() {
  echo "–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") [–û–ü–¶–ò–ò] [–ê–†–ì–£–ú–ï–ù–¢–´...]"
  echo ""
  echo "–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:"
  echo "  -h, --help                –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
  echo "  -S, --sync [–ø–∞–∫–µ—Ç—ã...]    –°–æ–±—Ä–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
  echo "                            –° –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã."
  echo "  -A, --add <–ø–∞–∫–µ—Ç—ã...>     –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏."
  echo "  -R, --remove <–ø–∞–∫–µ—Ç—ã...>  –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."
  echo "  -Q, --query               –ó–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç–æ–≤ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–µ."
  echo "  -C, --clean               –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ø–∏—Å–∫–µ."
  echo "  -U, --update-db           –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."
  echo "  --setup-pacman            –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å /etc/pacman.conf."
  echo ""
  echo "–û–ø—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤:"
  echo "  -i, --info <–ø–∞–∫–µ—Ç>        (–¥–ª—è -Q) –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ."
  echo "  -l, --list                (–¥–ª—è -Q) –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ (–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."
  echo "  --force                   (–¥–ª—è -S) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞."
  echo "  --quiet                   (–¥–ª—è -S) –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–≤–æ–¥–∞."
  echo ""
  echo "–ü—Ä–∏–º–µ—Ä—ã:"
  echo "  $(basename "$0")                          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
  echo "  $(basename "$0") -S                      # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã –ø–æ —Å–ø–∏—Å–∫—É"
  echo "  $(basename "$0") -S --force             # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã"
  echo "  $(basename "$0") -S clementine-git      # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 'clementine-git'"
  echo "  $(basename "$0") -A package1 package2      # –î–æ–±–∞–≤–∏—Ç—å –¥–≤–∞ –ø–∞–∫–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫"
  echo "  $(basename "$0") -R package1              # –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"
  echo "  $(basename "$0") -Ql                      # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
  echo "  $(basename "$0") -Qi clementine-git       # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ 'clementine-git'"
  echo "  $(basename "$0") -C                       # –ù–∞—á–∞—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
list_packages_interactive() {
  show_header
  print_colored $BLUE "üìã –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏:"
  echo ""
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
  else
    local i=1
    while IFS= read -r package; do
      [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–∫–µ—Ç–∞
      local status_icon="‚ùì"
      local pkg_file=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
      
      if [[ -n "$pkg_file" ]]; then
        status_icon="‚úÖ"
      else
        status_icon="‚ùå"
      fi
      
      echo "  $i) $status_icon $package"
      ((i++))
    done < "$aur_packages_file"
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã
add_packages_interactive() {
  show_header
  print_colored $BLUE "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫"
  echo ""
  
  while true; do
    local package=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ AUR (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    
    if [[ "$package" == "q" || "$package" == "Q" ]]; then
      break
    fi
    
    if [[ -z "$package" ]]; then
      print_colored $YELLOW "–ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
      continue
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ AUR
    print_colored $YELLOW "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ $package –≤ AUR..."
    if yay -Si "$package" >/dev/null 2>&1; then
      if ! grep -q "^$package$" "$aur_packages_file"; then
        echo "$package" >> "$aur_packages_file"
        print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $package –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫"
      else
        print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç $package —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ"
      fi
    else
      print_colored $RED "‚ùå –ü–∞–∫–µ—Ç $package –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
    fi
    echo ""
  done
}

# –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç—ã
remove_packages_interactive() {
  show_header
  print_colored $BLUE "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"
  echo ""
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
    return
  fi
  
  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  local packages=()
  local i=1
  while IFS= read -r package; do
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
    packages+=("$package")
    echo "  $i) $package"
    ((i++))
  done < "$aur_packages_file"
  
  echo ""
  local choice=$(read_input "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
  
  if [[ "$choice" == "q" || "$choice" == "Q" ]]; then
    return
  fi
  
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 && "$choice" -le ${#packages[@]} ]]; then
    local package_to_remove="${packages[$((choice-1))]}"
    
    if confirm "–£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç '$package_to_remove'?"; then
      sed -i "/^$package_to_remove$/d" "$aur_packages_file"
      rm -f "$aur_repo_dir"/${package_to_remove}-*.pkg.tar.zst
      print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $package_to_remove —É–¥–∞–ª–µ–Ω"
    fi
  else
    print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞"
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏
build_settings_interactive() {
  show_header
  print_colored $BLUE "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏"
  echo ""
  
  while true; do
    echo "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    echo "  1) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: $(if $force_rebuild; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
    echo "  2) –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: $(if $quiet; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
    echo "  0) –ù–∞–∑–∞–¥"
    echo ""
    
    local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    case $choice in
      1)
        force_rebuild=$(! $force_rebuild)
        print_colored $GREEN "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞: $(if $force_rebuild; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
        ;;
      2)
        quiet=$(! $quiet)
        print_colored $GREEN "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: $(if $quiet; then echo '–í–ö–õ'; else echo '–í–´–ö–õ'; fi)"
        ;;
      0)
        break
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        ;;
    esac
    echo ""
  done
}

# –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç—ã
build_packages() {
  local single_package_rebuild=""
  if [[ $# -gt 0 ]]; then
    single_package_rebuild=$1
  fi

  if [ ! -s "$aur_packages_file" ]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–∞–∫–µ—Ç—ã –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π."
    return 0
  fi

  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  # mkdir -p "$build_dir"
  # cd "$build_dir" || exit 1

  local built_packages=()
  local failed_packages=()
  
  local packages_to_process_list
  if [[ -n "$single_package_rebuild" ]]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–∫–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if ! grep -q "^${single_package_rebuild}$" "$aur_packages_file"; then
      print_colored $RED "‚ùå –ü–∞–∫–µ—Ç '$single_package_rebuild' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
      return 1
    fi
    packages_to_process_list="$single_package_rebuild"
  else
    packages_to_process_list=$(grep '^[^#]' "$aur_packages_file")
  fi

  local total_packages=$(echo "$packages_to_process_list" | wc -l)
  local current=0

  while IFS= read -r package; do
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    [[ -z "$package" ]] && continue
    
    ((current++))
    print_colored $BLUE "[$current/$total_packages] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞: $package"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—Ç—å –ø–∞–∫–µ—Ç
    local needs_rebuild=false
    if [[ "$force_rebuild" == "true" ]] || [[ -n "$single_package_rebuild" ]]; then
      needs_rebuild=true
      print_colored $YELLOW "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ $package"
    else
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞ –≤ AUR –∏ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
      local aur_version=$(yay -Si "$package" 2>/dev/null | grep "^Version" | awk '{print $3}')
      local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -printf '%f\n' | head -1)
      
      if [[ -z "$local_pkg" ]] || [[ -z "$aur_version" ]]; then
        needs_rebuild=true
        print_colored $YELLOW "–ü–∞–∫–µ—Ç $package –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ AUR"
      else
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Å–∏—é –∏–∑ AUR, —Ç–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º
        if [[ "$local_pkg" != *"$aur_version"* ]]; then
          needs_rebuild=true
          print_colored $YELLOW "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ $package"
        else
          print_colored $GREEN "–ü–∞–∫–µ—Ç $package –∞–∫—Ç—É–∞–ª–µ–Ω"
        fi
      fi
    fi

    if [[ "$needs_rebuild" == "true" ]]; then
      # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
      if [[ ! -d "$build_dir" ]]; then
          mkdir -p "$build_dir"
      fi
      cd "$build_dir" || exit 1
      
      # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞
      rm -f "$aur_repo_dir"/${package}-*.pkg.tar.zst
      
      # –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞
      local yay_opts="--noconfirm --needed"
      [[ "$quiet" == "true" ]] && yay_opts="$yay_opts --quiet"
      # –î–æ–±–∞–≤–ª—è–µ–º --rebuild –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
      if [[ "$force_rebuild" == "true" ]] || [[ -n "$single_package_rebuild" ]]; then
        yay_opts="$yay_opts --rebuild"
      fi
      
      print_colored $BLUE "üî® –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ $package..."
      if yay -S $yay_opts "$package"; then
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        local pkg_file=$(find "/home/$USER/.cache/yay/$package" -name "*.pkg.tar.zst" -type f | head -1)
        if [[ -n "$pkg_file" && -f "$pkg_file" ]]; then
          cp "$pkg_file" "$aur_repo_dir/"
          built_packages+=("$package")
          print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç $package —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
        else
          print_colored $RED "‚ùå –§–∞–π–ª –ø–∞–∫–µ—Ç–∞ –¥–ª—è $package –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ yay"
          failed_packages+=("$package")
        fi
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞: $package"
        failed_packages+=("$package")
      fi
    fi
    echo ""
  done <<< "$packages_to_process_list"

  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
  if [ -d "$build_dir" ]; then
    cd /
    rm -rf "$build_dir"
  fi

  # –û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ
  echo ""
  print_colored $BLUE "üìä –û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ:"
  if [[ ${#built_packages[@]} -gt 0 ]]; then
    print_colored $GREEN "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${#built_packages[@]}"
    printf '   %s\n' "${built_packages[@]}"
  fi
  
  if [[ ${#failed_packages[@]} -gt 0 ]]; then
    print_colored $RED "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç–æ–≤: ${#failed_packages[@]}"
    printf '   %s\n' "${failed_packages[@]}"
  fi

  if [[ ${#built_packages[@]} -eq 0 && ${#failed_packages[@]} -eq 0 && -z "$single_package_rebuild" ]]; then
    print_colored $YELLOW "‚ÑπÔ∏è  –í—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
  fi

  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
  if [[ ${#built_packages[@]} -gt 0 ]]; then
    echo ""
    update_repository
  fi
}

# –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è)
build_packages_interactive() {
  show_header
  print_colored $BLUE "üî® –°–±–æ—Ä–∫–∞ / –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
  echo ""
  
  if [[ ! -s "$aur_packages_file" ]]; then
    print_colored $YELLOW "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–∞–∫–µ—Ç—ã –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π."
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
    return
  fi
  
  echo "  1) –°–æ–±—Ä–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã"
  echo "  2) –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞–∫–µ—Ç"
  echo "  0) –ù–∞–∑–∞–¥"
  echo ""
  local choice=$(read_input "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
  
  case $choice in
    1)
      if confirm "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤?"; then
        build_packages
      fi
      ;;
    2)
      print_colored $BLUE "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏:"
      local packages=()
      local i=1
      while IFS= read -r package; do
        [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
        packages+=("$package")
        echo "  $i) $package"
        ((i++))
      done < "$aur_packages_file"
      echo ""
      local pkg_choice=$(read_input "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

      if [[ "$pkg_choice" =~ ^[0-9]+$ ]] && [[ "$pkg_choice" -ge 1 && "$pkg_choice" -le ${#packages[@]} ]]; then
        local package_to_rebuild="${packages[$((pkg_choice-1))]}"
        if confirm "–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç '$package_to_rebuild'?"; then
          build_packages "$package_to_rebuild"
        fi
      elif [[ "$pkg_choice" != "q" && "$pkg_choice" != "Q" ]]; then
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞"
        sleep 1
      fi
      ;;
    0)
      return
      ;;
    *)
      print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
      sleep 1
      ;;
  esac
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
update_repository() {
  print_colored $BLUE "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
  
  # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö .pkg.tar.zst —Ñ–∞–π–ª–∞—Ö
  current_pkg_files_details=""
  if compgen -G "$aur_repo_dir/*.pkg.tar.zst" > /dev/null; then
      current_pkg_files_details=$(find "$aur_repo_dir" -maxdepth 1 -name '*.pkg.tar.zst' -printf '%f\t%s\t%T@\n' | sort)
  fi
  current_pkg_state_hash=$(echo -n "$current_pkg_files_details" | sha256sum | awk '{print $1}')

  old_pkg_state_hash=""
  if [[ -f "$state_file" ]]; then
    old_pkg_state_hash=$(cat "$state_file")
  fi

  if [[ "$current_pkg_state_hash" != "$old_pkg_state_hash" ]]; then
    print_colored $YELLOW "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    rm -f "$aur_repo_dir"/aur-local.db* "$aur_repo_dir"/aur-local.files*

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞–∫–µ—Ç—ã
    if compgen -G "$aur_repo_dir/*.pkg.tar.zst" > /dev/null; then
      if repo-add "$db_path" "$aur_repo_dir"/*.pkg.tar.zst; then
        echo "$current_pkg_state_hash" > "$state_file"
        print_colored $GREEN "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        return 1
      fi
    else
      print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
      rm -f "$state_file"
    fi
  else
    print_colored $GREEN "‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
  fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ)
update_repository_interactive() {
  show_header
  print_colored $BLUE "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
  echo ""
  
  update_repository
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pacman.conf
setup_pacman_interactive() {
  show_header
  print_colored $BLUE "üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pacman.conf"
  echo ""
  
  local pacman_conf="/etc/pacman.conf"
  local repo_entry="[aur-local]
SigLevel = Optional TrustAll
Server = file://$aur_target/os/\$arch"

  if grep -q "^\[aur-local\]" "$pacman_conf"; then
    print_colored $GREEN "‚úÖ –ó–∞–ø–∏—Å—å [aur-local] —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ $pacman_conf"
  else
    print_colored $YELLOW "‚ö†Ô∏è  –ó–∞–ø–∏—Å—å [aur-local] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ $pacman_conf"
    echo ""
    echo "–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å:"
    print_colored $CYAN "$repo_entry"
    echo ""
    
    if confirm "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ $pacman_conf?"; then
      # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
      local temp_file=$(mktemp)
      echo -e "\n# –õ–æ–∫–∞–ª—å–Ω—ã–π AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n$repo_entry" > "$temp_file"
      
      # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
      if sudo tee -a "$pacman_conf" < "$temp_file" >/dev/null; then
        print_colored $GREEN "‚úÖ AUR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ $pacman_conf"
        echo ""
        if confirm "–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ (sudo pacman -Sy)?"; then
          sudo pacman -Sy
        fi
      else
        print_colored $RED "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ $pacman_conf"
      fi
      
      rm -f "$temp_file"
    fi
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
package_info_interactive() {
  show_header
  print_colored $BLUE "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ"
  echo ""
  
  local package=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–∫–µ—Ç–∞")
  
  if [[ -z "$package" ]]; then
    print_colored $RED "‚ùå –ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
    return
  fi
  
  echo ""
  print_colored $BLUE "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ: $package"
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
  if grep -q "^$package$" "$aur_packages_file"; then
    print_colored $GREEN "‚úÖ –ü–∞–∫–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  else
    print_colored $YELLOW "‚ö†Ô∏è  –ü–∞–∫–µ—Ç –ù–ï –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–±–æ—Ä–∫–∏"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
  local local_pkg=$(find "$aur_repo_dir" -name "${package}-*.pkg.tar.zst" -type f | head -1)
  if [[ -n "$local_pkg" ]]; then
    local pkg_size=$(du -h "$local_pkg" | cut -f1)
    print_colored $GREEN "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $(basename "$local_pkg") ($pkg_size)"
  else
    print_colored $YELLOW "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  
  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR
  echo ""
  print_colored $BLUE "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ AUR:"
  if yay -Si "$package" 2>/dev/null; then
    echo ""
  else
    print_colored $RED "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AUR"
  fi
  
  echo ""
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
main_interface() {
  while true; do
    show_main_menu
    
    local choice=$(read_input "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è")
    
    case $choice in
      1)
        list_packages_interactive
        ;;
      2)
        add_packages_interactive
        ;;
      3)
        remove_packages_interactive
        ;;
      4)
        build_packages_interactive
        ;;
      5)
        build_settings_interactive
        ;;
      6)
        setup_pacman_interactive
        ;;
      7)
        clean_old_packages_cli
        ;;
      8)
        package_info_interactive
        ;;
      9)
        update_repository_interactive
        ;;
      0)
        print_colored $GREEN "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        exit 0
        ;;
      *)
        print_colored $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        sleep 1
        ;;
    esac
  done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  setup_directories
  check_yay

  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  exec 9>"$lock"
  if ! flock -n 9; then
    print_colored $RED "‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–∏–ø—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    exit 1
  fi

  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  if [[ $# -eq 0 ]]; then
    main_interface
  else
    # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    local operation=""
    local sub_operation=""
    local cli_packages=()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
      case "$1" in
        -h|--help)
          usage
          exit 0
          ;;
        -S|--sync)
          operation="S"
          shift
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –ø–∞–∫–µ—Ç—ã
          while [[ $# -gt 0 ]] && ! [[ "$1" =~ ^- ]]; do
            cli_packages+=("$1")
            shift
          done
          ;;
        -A|--add)
          operation="A"
          shift
          while [[ $# -gt 0 ]] && ! [[ "$1" =~ ^- ]]; do
            cli_packages+=("$1")
            shift
          done
          ;;
        -R|--remove)
          operation="R"
          shift
          while [[ $# -gt 0 ]] && ! [[ "$1" =~ ^- ]]; do
            cli_packages+=("$1")
            shift
          done
          ;;
        -Q|--query)
          operation="Q"
          shift
          ;;
        -C|--clean)
          operation="C"
          shift
          ;;
        -U|--update-db)
          operation="U"
          shift
          ;;
        --setup-pacman)
          operation="SETUP"
          shift
          ;;
        # –û–ø—Ü–∏–∏
        -i|--info)
          sub_operation="i"
          shift
          if [[ $# -gt 0 ]] && ! [[ "$1" =~ ^- ]]; then
            cli_packages+=("$1")
            shift
          fi
          ;;
        -l|--list)
          sub_operation="l"
          shift
          ;;
        --force)
          force_rebuild=true
          shift
          ;;
        --quiet)
          quiet=true
          shift
          ;;
        *)
          print_colored $RED "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
          usage
          exit 1
          ;;
      esac
    done

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    case "$operation" in
      S)
        if [[ ${#cli_packages[@]} -gt 0 ]]; then
          # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
          for pkg in "${cli_packages[@]}"; do
            build_packages "$pkg"
          done
        else
          # –°–æ–±—Ä–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
          build_packages
        fi
        ;;
      A)
        add_packages_cli "${cli_packages[@]}"
        ;;
      R)
        remove_packages_cli "${cli_packages[@]}"
        ;;
      Q)
        case "$sub_operation" in
          i)
            if [[ ${#cli_packages[@]} -eq 0 ]]; then
              print_colored $RED "–û—à–∏–±–∫–∞: –¥–ª—è –æ–ø—Ü–∏–∏ -i —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–∞–∫–µ—Ç–∞."
              exit 1
            fi
            package_info_cli "${cli_packages[0]}"
            ;;
          l|*) # -l –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è -Q
            list_packages_cli
            ;;
        esac
        ;;
      C)
        clean_old_packages_cli
        ;;
      U)
        update_repository
        ;;
      SETUP)
        setup_pacman_interactive
        ;;
      *)
        print_colored $RED "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è."
        usage
        exit 1
        ;;
    esac
  fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 